// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  role             UserRole
  firstName        String
  lastName         String
  deviceFingerprint String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations based on role
  studentProfile   StudentProfile? @relation(name: "StudentProfile")
  teacherProfile   TeacherProfile? @relation(name: "TeacherProfile")
  adminProfile     AdminProfile?   @relation(name: "AdminProfile")
}

model StudentProfile {
  id             String   @id @default(uuid())
  studentId      String   @unique // School ID
  enrollmentYear Int
  major          String?
  
  // Relation to base user
  userId         String   @unique
  user           User     @relation(name: "StudentProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherProfile {
  id             String   @id @default(uuid())
  teacherId      String   @unique // Employee ID
  department     String?
  
  // Relation to base user
  userId         String   @unique
  user           User     @relation(name: "TeacherProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model AdminProfile {
  id             String   @id @default(uuid())
  adminLevel     Int      @default(1) // Different admin levels
  
  // Relation to base user
  userId         String   @unique
  user           User     @relation(name: "AdminProfile", fields: [userId], references: [id], onDelete: Cascade)
}
